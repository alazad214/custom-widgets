Custom Form Validation Condition-->>

class InputValidator {
  // Validate Email

  static String? validateEmail(String? value) {
    if (value == null || value.isEmpty) {
      return 'Please enter your email';
    }
    final emailRegex = RegExp(r'^[^@]+@[^@]+\.[^@]+');
    if (!emailRegex.hasMatch(value)) {
      return 'Please enter a valid email';
    }
    if (!value.endsWith('@gmail.com')) {
      return 'Please enter a Gmail address';
    }
    return null;
  }

  // Validate Password
  static String? validatePassword(String? value) {
    if (value == null || value.isEmpty) {
      return 'Please enter your password';
    }
    if (value.length < 8) {
      return 'Password must be at least 8 characters long';
    }
    final hasLetter = RegExp(r'[a-zA-Z]').hasMatch(value);
    final hasDigit = RegExp(r'\d').hasMatch(value);
    if (!hasLetter || !hasDigit) {
      return 'Password must contain both letters and numbers';
    }
    return null;
  }

  // Validate Username
  static String? validateUsername(String? value) {
    if (value == null || value.isEmpty) {
      return 'Please enter your username';
    }
    if (value.length < 2) {
      return 'Username must be at least 3 characters long';
    }
    return null;
  }

  static String? validatenumber(String? value) {
    if (value == null || value.isEmpty) {
      return 'Please enter phone number';
    }
    final hasOnlyDigits = RegExp(r'^\d+$').hasMatch(value);
    if (!hasOnlyDigits) {
      return 'Phone number must contain only digits';
    }
    return null;
  }

  static String? validateaddress(String? value) {
    if (value == null || value.isEmpty) {
      return 'Please enter your address';
    }
    return null;
  }

  static String? validatefiled(String? value, String fieldName) {
    if (value == null || value.isEmpty) {
      return '$fieldName is required';
    }
    return null;
  }
}



